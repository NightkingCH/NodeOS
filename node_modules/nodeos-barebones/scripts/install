#!/usr/bin/env bash

# This script compiles from scratch a Node.js executable and its needed
# libraries and shell utils to offer a Node.js REPL from cold boot

GRN="\e[32m"
CLR="\e[0m"


TOOLCHAIN=`pwd`/node_modules/nodeos-cross-toolchain
TOOLS=$TOOLCHAIN/cross-tools

# Adjust environment variables
TOOLS=$TOOLS source $TOOLCHAIN/scripts/adjustEnvVars.sh || exit $?


if [[ -z "$name" ]]; then name=barebones; fi


#
# Node.js
#

SRC_DIR=`pwd`/deps/node
OBJ_DIR=$OBJECTS/node

if [[ ! -d $OBJ_DIR ]]; then
  mkdir -p $OBJ_DIR || exit 10

  (
  #  cd $OBJ_DIR
    cd $SRC_DIR  # Node.js don't support out-of-tree builds yet

    # Configure
#    CROSS_COMPILE="$TARGET-" \
    CC=$TARGET-gcc           \
    CXX=$TARGET-g++          \
    $SRC_DIR/configure       \
        --dest-cpu=$NODE_ARCH \
        --prefix=/            \
        --dest-os=linux      \
        --without-dtrace     \
        --without-npm        \
        --without-snapshot   || exit 11

    # Compile
    $MAKE || exit 12

    # Strip binary
    $TARGET-strip node || exit 13
  )
fi


#
# Wrap the system up and pack it
#

SRC_DIR=$TOOLCHAIN/sources/linux
OBJ_DIR=$OBJECTS/linux

case $PLATFORM in
  docker)
    ( cd $SRC_DIR/usr && $MAKE O=$OBJ_DIR gen_init_cpio ) || exit 20

    `$OBJ_DIR/usr/gen_init_cpio cpio.txt` | tar -cf - --format ustar @- | \
        docker import - $name || exit 21
  ;;
  pc_qemu | pc_image | raspberry_qemu | raspberry_image)
    if [[ ! -d $OBJ_DIR ]]; then
      MAKE="$MAKE O=$OBJ_DIR ARCH=$ARCH CROSS_COMPILE=$TARGET-"

      (
        cd $SRC_DIR

        # Configure
        $MAKE mrproper || exit 22

        case $PLATFORM in
          pc_qemu | pc_image)
            case $CPU in
              i[456]86)
                $MAKE i386_defconfig
              ;;
              x86_64)
                $MAKE x86_64_defconfig
              ;;
            esac || exit 23
          ;;
          raspberry_qemu | raspberry_image)
            $MAKE bcm2835_defconfig
          ;;
        esac || exit 23
      )

      cat config >> $OBJ_DIR/.config     &&
      sed -i "s/=m/=y/" $OBJ_DIR/.config || exit 24

      (
        cd $SRC_DIR

        # Tidy configuration
        $MAKE oldnoconfig || exit 25

        # Compile
        $MAKE || exit 26
      )

      # Install
      mkdir -p out                                 || exit 27
      cp $OBJ_DIR/arch/$ARCH/boot/bzImage $OUT_DIR || exit 28
      ln -sfv $OUT_DIR bzImage                     || exit 29
    fi
  ;;
esac


echo -e "${GRN}Successfully built '$name'${CLR}"
